#!/usr/bin/python3

import sys;
import time;

T_INS   = 0x00;
T_INT   = 0x01;
T_LAB   = 0x02;
T_REG   = 0x03;
T_DREG  = 0x04;
T_ID    = 0x05;
T_ADDRB = 0x06;
T_ADDRW = 0x07;
T_ADDRH = 0x08;
T_BYTE  = 0x09;
T_STR   = 0x0A;
T_MCR   = 0x0B;
T_DREB  = 0x0C;
T_DREW  = 0x0D;
T_DREH  = 0x0E;
T_EOL   = 0x0C;
T_EOF   = 0x0D;

ASTINS   = 0x00;
ASTBYTES = 0x01;
ASTRES   = 0x02;
ASTEOF   = 0x04;

HUMAN_TOKS = ["inst", "int", "label", "reg", "*reg", "id", "#addr", "@addr", "*addr", "byte", "string", "mcr", "eol", "eof"];
HUMAN_AST  = ["INST", "BYTES", "RESERVE", "BRK-HANDLER", "EOF"];

LET    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_";
LETEXT = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy0123456789z-_.";
DIG    = "0123456789";
WHI    = " \r\0\t";
DIGEXT = "0123456789ABCDEF";
KEY2   = [
  "mov", "nop", "int", "hlt", "add", "jmp", "inx", "dex",
  "je", "jne", "jc", "jnc", "js", "jn", "ji", "jni", "cmp",
  "jg", "jl", "lodb", "lodw", "lodh", "trap", "call", "ret",
  "re", "rne", "rc", "rnc", "rs", "rn", "ri", "rni", "push",
  "stob", "stow", "stoh", "mul", "div", "sub", "loop", "pop",
  "ldds", "lddg", "stds", "stdg", "sti", "iret", "pow", "and",
  "ora", "xor", "sal", "sar"
];
KEYR   = ["eax", "ebx", "ecx", "edx", "esi", "egi", "esp", "ebp"];

def PrintTokens(toks: list):
  for i,j in enumerate(toks):
    if (len(j) == 2):
      print(f"{i}: {HUMAN_TOKS[j[0]]} {j[1]}");
    elif (len(j) == 1):
      print(f"{i}: {HUMAN_TOKS[j[0]]}");

def PrintAst(toks: list):
  for i in toks:
    print(f"${hex(i[3])[2:].upper():0>4}: {HUMAN_AST[i[0]]} {i[1]} {i[2]}");

def PrintLabs(labs: dict):
  print("\nLabel symbols:");
  for i in labs:
    print(f"{i+':': <30}${hex(labs[i])[2:].upper():0>4}");

def ExportLabs(filename: str, labs: dict, output_file: str):
  with open(output_file, "w") as fl:
    for i in labs:
      fl.write(f"{i}	{hex(labs[i])[2:].upper():0>4}\n");

def ImportLabs(filename: str, labs: dict, import_file: str):
  with open(import_file, "r") as fl:
    for line in fl.read().split("\n"):
      if (line):
        symbol,val = line.split(chr(9));
        labs[symbol] = int(val, base=16);
  return labs;

def OffsetLabs(labs: dict, offset: int):
  for i in labs:
    labs[i] += offset;
  return labs;

def usage():
  print("kasm -- Kakashka Assembler 1.0 (but who cares about the version anyways)");
  print("Usage: kasm [OPTIONS] <file.asm> <file.bin>");
  print("Options:");
  print("  -h           Show help");
  print("  -o [VAL]     Offset labels to VAL");
  print("  -i <file>    Import labels from a file");
  print("  -e           Export labels to the output file");
  print("  -I           Start interactive mode");

# Lexer:
def Lex(prog: str, filename: str):
  prog += "\n\0";
  labelscope: str  = "";
  proglen:    int  = len(prog);
  linenum:    int  = 1;
  toks:       list = [];
  pos:        int  = 0;
  buf:        str  = "";
  while (True):
    if (prog[pos] == "\0"):
      toks.append((T_EOL,));
      toks.append((T_EOF,));
      return toks, 0;
    elif (prog[pos] == ";"):
      pos += 1;
      while (prog[pos] != "\n"):
        pos += 1;
    elif ((prog[pos] == "/") and (prog[pos+1] == "/")):
      pos += 1;
      while (prog[pos] != "\n"):
        pos += 1;
    elif ((prog[pos] == "/") and (prog[pos+1] == "*")):
      pos += 1;
      while ((prog[pos] != "*") or (prog[pos+1] != "/")):
        pos += 1;
      pos += 2;
    elif (prog[pos] in WHI):
      pos += 1;
    elif (prog[pos] == "\n"):
      if ((toks) and (toks[-1][0] != T_EOL)):
        toks.append((T_EOL,));
      pos += 1;
      linenum += 1;
    elif (prog[pos] in "."): # Local label
      pos += 1;
      while (prog[pos] in LETEXT):
        buf += prog[pos];
        pos += 1;
      if (prog[pos] == ":"):
        toks.append((T_LAB, labelscope+"."+buf));
        pos += 1;
      else:
        toks.append((T_ID, labelscope+"."+buf));
      buf = "";
    elif (prog[pos] in "%"):
      pos += 1;
      while (prog[pos] in LET):
        buf += prog[pos];
        pos += 1;
      pos += 1;
      if (buf in KEYR):
        toks.append((T_REG, KEYR.index(buf)));
      else:
        print(f"kasm: {filename}:{linenum}:1: Unknown register {buf}");
        exit(1);
      buf = "";
      pos -= 1;
    elif (prog[pos] in DIG):
      while (prog[pos] in DIG):
        buf += prog[pos];
        pos += 1;
      toks.append((T_INT, int(buf, base=10)));
      buf = "";
    elif (prog[pos] == "\""):
      pos += 1;
      while (prog[pos] != "\""):
        if (prog[pos] == "$"):
          buf += "\n";
        elif (prog[pos] == "\n"):
          print(f"kasm: {filename}:{linenum}:1: Unterminated string literal");
          exit(1);
        elif ((prog[pos] == "\\") and (prog[pos+1] == "\"")):
          buf += "\"";
          pos += 1;
        elif (prog[pos] == "^"):
          if (ord(prog[pos+1]) in range(64, 97)):
            buf += chr(ord(prog[pos+1])-64);
          elif (prog[pos+1] in "^$"):
            buf += prog[pos+1];
          pos += 1;
        else:
          buf += prog[pos];
        pos += 1;
      pos += 1;
      toks.append((T_STR, buf.encode()));
      buf = "";
    elif (prog[pos] == "'"):
      pos += 1;
      if (prog[pos] == "$"):
        buf = 10;
      elif ((prog[pos] == "\\") and (prog[pos+1] == "\"")):
        buf = 34;
        pos += 2;
      elif (prog[pos] == "^"):
        if (ord(prog[pos+1]) in range(64, 97)):
          buf = ord(prog[pos+1])-64;
        elif (prog[pos+1] in "^$"):
          buf = ord(prog[pos+1]);
        pos += 1;
      else:
        buf = ord(prog[pos]);
      pos += 1;
      if (prog[pos] != "'"):
        print(f"kasm: {filename}:{linenum}:1: Unterminated character literal");
        exit(1);
      pos += 1;
      toks.append((T_INT, buf));
      buf = "";
    elif (prog[pos] == "^"):
      pos += 1;
      while (prog[pos] in DIGEXT):
        buf += prog[pos];
        pos += 1;
      pos += 1;
      toks.append((T_INT, int(buf, base=16)));
      buf = "";
      # cpos += 1;
    elif (prog[pos] == "$"):
      pos += 1;
      while (prog[pos] in DIGEXT):
        buf += prog[pos];
        pos += 1;
      toks.append((T_INT, int(buf, base=16)));
      buf = "";
    elif (prog[pos] == "#"):
      pos += 1;
      if (prog[pos] in DIGEXT):
        while (prog[pos] in DIGEXT):
          buf += prog[pos];
          pos += 1;
        toks.append((T_ADDRB, int(buf, base=16)));
      else:
        while (prog[pos] in LET):
          buf += prog[pos];
          pos += 1;
        toks.append((T_DREB, buf));
      buf = "";
    elif (prog[pos] == "@"):
      pos += 1;
      if (prog[pos] in DIGEXT):
        while (prog[pos] in DIGEXT):
          buf += prog[pos];
          pos += 1;
        toks.append((T_ADDRW, int(buf, base=16)));
      else:
        while (prog[pos] in LET):
          buf += prog[pos];
          pos += 1;
        toks.append((T_DREW, buf));
      buf = "";
    elif (prog[pos] == "*"):
      pos += 1;
      regop = 0;
      if (prog[pos] == "%"):
        regop = 1;
        pos += 1;
      while (prog[pos] in LETEXT):
        buf += prog[pos];
        pos += 1;
      if (regop): # Dereferncing a register bro what :/
        toks.append((T_DREG, KEYR.index(buf)));
      else:
        toks.append((T_ID, buf));
      buf = "";
    elif (prog[pos] in LET):
      while (prog[pos] in LETEXT):
        buf += prog[pos];
        pos += 1;
      if (prog[pos] == ":"):
        toks.append((T_LAB, buf));
        labelscope = buf;
        pos += 1;
      else:
        if (buf in KEY2):
          toks.append((T_INS, buf));
        elif (buf == "bytes"):
          toks.append((T_BYTE, 0));
        elif (buf == "reserve"):
          toks.append((T_MCR, "reserve"));
        elif (buf == "extern"):
          toks.append((T_MCR, "extern"));
        else:
          toks.append((T_ID, buf));
      buf = "";
    else:
      print(f"\033[31mUnknown\033[0m character {hex(ord(prog[pos]))[2:].upper():0>2}");
      print(f"\033[33m  Note:\033[0m at position {hex(pos)[2:]:0>4}h");
      print(f"\033[33m  Note:\033[0m at position {pos}");
      print(f"\033[33m  Note:\033[0m `{prog[pos]}`");
      exit(1);
  return [], 1;

def FetchLabels(prog: list, disk: bool):
  labs = dict();
  for i in prog:
    if (i[0] == T_LAB):
      labs[i[1]] = i[2]+(0x090000*disk);
  return labs;

def RemEmpty(prog: str):
  return "\n".join([i for i in prog.split("\n") if i]);

ParseInst = lambda toks, b, pos, pc: \
  ((ASTINS, "MOVri", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "mov") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_INT)) else
   (ASTINS, "MOVrl", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "mov") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_ID)) else
   (ASTINS, "MOVrb", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "mov") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_ADDRB)) else
   (ASTINS, "MOVrw", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "mov") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_ADDRW)) else
   (ASTINS, "MOVbr", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "mov") and (toks[pos+1][0] == T_ADDRB) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "MOVwr", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "mov") and (toks[pos+1][0] == T_ADDRW) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "MOVrc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "mov") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "MOVra", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "mov") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_ID)) else
   (ASTINS, "INT8",  toks[pos+1][1], pos + 2, pc + 2)                   if ((b == "int") and (toks[pos+1][0] == T_INT)) else
   (ASTINS, "POPr",  toks[pos+1][1], pos + 2, pc + 2)                   if ((b == "pop") and (toks[pos+1][0] == T_REG)) else
   (ASTINS, "HLT",   0, pos + 1, pc + 1)                                if (b == "hlt") else
   (ASTINS, "ADDri", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "add") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_INT)) else
   (ASTINS, "ADDrc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "add") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "ADDrb", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "add") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_ADDRB)) else
   (ASTINS, "ADDrw", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "add") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_ADDRW)) else
   (ASTINS, "ADDbr", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "add") and (toks[pos+1][0] == T_ADDRB) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "ADDwr", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "add") and (toks[pos+1][0] == T_ADDRW) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "SUBri", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "sub") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_INT)) else
   (ASTINS, "SUBrc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "sub") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "MULri", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "mul") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_INT)) else
   (ASTINS, "MULrc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "mul") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "DIVri", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "div") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_INT)) else
   (ASTINS, "DIVrc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "div") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "ANDrc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "and") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "ORArc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "ora") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "XORrc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "xor") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "JMPa", toks[pos+1][1], pos + 2, pc + 5)                    if ((b == "jmp") and (toks[pos+1][0] == T_ID)) else
   (ASTINS, "JMP2", toks[pos+1][1], pos + 2, pc + 5)                    if ((b == "jmp") and (toks[pos+1][0] == T_INT)) else
   (ASTINS, "JEa", toks[pos+1][1], pos + 2, pc + 5)                     if ((b == "je") and (toks[pos+1][0] == T_ID)) else
   (ASTINS, "JNEa", toks[pos+1][1], pos + 2, pc + 5)                    if ((b == "jne") and (toks[pos+1][0] == T_ID)) else
   (ASTINS, "JCa", toks[pos+1][1], pos + 2, pc + 5)                     if ((b == "jc") and (toks[pos+1][0] == T_ID)) else
   (ASTINS, "JNCa", toks[pos+1][1], pos + 2, pc + 5)                    if ((b == "jnc") and (toks[pos+1][0] == T_ID)) else
   (ASTINS, "JSa", toks[pos+1][1], pos + 2, pc + 5)                     if ((b == "js") and (toks[pos+1][0] == T_ID)) else
   (ASTINS, "JSa", toks[pos+1][1], pos + 2, pc + 5)                     if ((b == "jg") and (toks[pos+1][0] == T_ID)) else
   (ASTINS, "JNa", toks[pos+1][1], pos + 2, pc + 5)                     if ((b == "jn") and (toks[pos+1][0] == T_ID)) else
   (ASTINS, "JNa", toks[pos+1][1], pos + 2, pc + 5)                     if ((b == "jl") and (toks[pos+1][0] == T_ID)) else
   (ASTINS, "JIa", toks[pos+1][1], pos + 2, pc + 5)                     if ((b == "ji") and (toks[pos+1][0] == T_ID)) else
   (ASTINS, "JNIa", toks[pos+1][1], pos + 2, pc + 5)                    if ((b == "jni") and (toks[pos+1][0] == T_ID)) else
   (ASTINS, "LOOPa", toks[pos+1][1], pos + 2, pc + 5)                   if ((b == "loop") and (toks[pos+1][0] == T_ID)) else
   (ASTINS, "INXr",  toks[pos+1][1], pos + 2, pc + 1)                   if ((b == "inx") and (toks[pos+1][0] == T_REG)) else
   (ASTINS, "DEXr",  toks[pos+1][1], pos + 2, pc + 1)                   if ((b == "dex") and (toks[pos+1][0] == T_REG)) else
   (ASTINS, "INXb",  toks[pos+1][1], pos + 2, pc + 5)                   if ((b == "inx") and (toks[pos+1][0] == T_ADDRB)) else
   (ASTINS, "INXw",  toks[pos+1][1], pos + 2, pc + 5)                   if ((b == "inx") and (toks[pos+1][0] == T_ADDRW)) else
   (ASTINS, "DEXb",  toks[pos+1][1], pos + 2, pc + 5)                   if ((b == "dex") and (toks[pos+1][0] == T_ADDRB)) else
   (ASTINS, "DEXw",  toks[pos+1][1], pos + 2, pc + 5)                   if ((b == "dex") and (toks[pos+1][0] == T_ADDRW)) else
   (ASTINS, "CALLa", toks[pos+1][1], pos + 2, pc + 5)                   if ((b == "call") and (toks[pos+1][0] == T_ID)) else
   (ASTINS, "CALL2", toks[pos+1][1], pos + 2, pc + 5)                   if ((b == "call") and (toks[pos+1][0] == T_INT)) else
   (ASTINS, "CMPri", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 5) if ((b == "cmp") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_INT)) else
   (ASTINS, "LODBc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "lodb") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "LODWc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "lodw") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "LODHc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "lodh") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "STOBc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "stob") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "STOWc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "stow") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "STOHc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "stoh") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "CMPrc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "cmp") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "TRAP", None, pos + 1, pc + 1) if (b == "trap") else
   (ASTINS, "RET", None, pos + 2, pc + 1)                     if (b == "ret") else
   (ASTINS, "RE", None, pos + 1, pc + 1)                      if (b == "re") else
   (ASTINS, "RNE", None, pos + 1, pc + 1)                     if (b == "rne") else
   (ASTINS, "RC", None, pos + 1, pc + 1)                      if (b == "rc") else
   (ASTINS, "RNC", None, pos + 1, pc + 1)                     if (b == "rnc") else
   (ASTINS, "RS", None, pos + 1, pc + 1)                      if (b == "rs") else
   (ASTINS, "RS", None, pos + 1, pc + 1)                      if (b == "rg") else
   (ASTINS, "RN", None, pos + 1, pc + 1)                      if (b == "rn") else
   (ASTINS, "RN", None, pos + 1, pc + 1)                      if (b == "rl") else
   (ASTINS, "RI", None, pos + 1, pc + 1)                      if (b == "ri") else
   (ASTINS, "RNI", None, pos + 1, pc + 1)                     if (b == "rni") else
   (ASTINS, "PUSHi", toks[pos+1][1], pos + 2, pc + 5)         if ((b == "push") and (toks[pos+1][0] == T_INT)) else
   (ASTINS, "PUSHl", toks[pos+1][1], pos + 2, pc + 5)         if ((b == "push") and (toks[pos+1][0] == T_ID)) else
   (ASTINS, "PUSHr", toks[pos+1][1], pos + 2, pc + 2)         if ((b == "push") and (toks[pos+1][0] == T_REG)) else
   (ASTINS, "LDDS", None, pos + 1, pc + 1)                    if (b == "ldds") else
   (ASTINS, "LDDG", None, pos + 1, pc + 1)                    if (b == "lddg") else
   (ASTINS, "STDS", None, pos + 1, pc + 1)                    if (b == "stds") else
   (ASTINS, "STDG", None, pos + 1, pc + 1)                    if (b == "stdg") else
   (ASTINS, "STI8", toks[pos+1][1], pos + 2, pc + 2)          if ((b == "sti") and (toks[pos+1][0] == T_INT)) else
   (ASTINS, "IRET", None, pos + 2, pc + 1)                    if (b == "iret") else
   (ASTINS, "INXbl", toks[pos+1][1], pos + 2, pc + 5)         if ((b == "inx") and (toks[pos+1][0] == T_DREB)) else
   (ASTINS, "DEXbl", toks[pos+1][1], pos + 2, pc + 5)         if ((b == "dex") and (toks[pos+1][0] == T_DREB)) else
   (ASTINS, "INXwl", toks[pos+1][1], pos + 2, pc + 5)         if ((b == "inx") and (toks[pos+1][0] == T_DREW)) else
   (ASTINS, "DEXwl", toks[pos+1][1], pos + 2, pc + 5)         if ((b == "dex") and (toks[pos+1][0] == T_DREW)) else
   (ASTINS, "POWrc", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "pow") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "SALrg", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "sal") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_INT)) else
   (ASTINS, "SARrg", (toks[pos+1][1], toks[pos+2][1]), pos + 3, pc + 2) if ((b == "sar") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_INT)) else
   (ASTINS, "NOP", (), pos + 1, pc + 1)                      if ((b == "nop")) else
   (print("kasm: unknown instruction", toks[pos]) and exit(1))
  );

# Parser:
def Parse(toks: list, filename: str, expm: int) -> list:
  labels: dict = {};
  ast:    list = [];
  pos:    int  = 0;
  pc:     int  = 0;
  while (toks[pos][0] != T_EOF):
    if (toks[pos][0] == T_INS): # Parse an instruction
      asttype, astvalue, astop, pos, newpc = ParseInst(toks, toks[pos][1], pos, pc);
      ast.append([asttype, astvalue, astop, pc]);
      pc = newpc;
    elif (toks[pos][0] == T_LAB): # Parse a label
      labels[toks[pos][1]] = pc;
      pos += 1;
    elif (toks[pos][0] == T_BYTE):
      ast.append([ASTBYTES, "__B_raw", [], pc]);
      pos += 1;
      while (toks[pos][0] != T_EOL):
        if (toks[pos][0] == T_INT):
          ast[-1][2].append(toks[pos][1]);
          pc += 1;
        elif (toks[pos][0] == T_STR):
          for i in toks[pos][1]:
            ast[-1][2].append(i);
          pc += len(toks[pos][1]);
        else:
          print(f"kasm: error: the bytes are too cooked. {HUMAN_TOKS[toks[pos][0]]}");
          exit(1);
        pos += 1;
      pos += 1;
    elif (toks[pos][0] == T_MCR): # Parse macros
      if (toks[pos][1] == "reserve"):
        if (toks[pos+1][0] != T_INT):
          print(f"\033[31mError\033[0m: expected number after reserve.");
          print(f"\033[96mHint\033[0m: syntax for `reserve` is: reserve 10 bytes");
          exit(1);
        if (toks[pos+2][0] == T_BYTE):
          restype = 1; # bytes
        else:
          print(f"\033[31mError\033[0m: expected bytes after reserve #n.");
          print(f"\033[96mHint\033[0m: syntax for `reserve` is: reserve 10 bytes");
          exit(1);
        ast.append([ASTRES, "__B_reserve", toks[pos+1][1]*restype, pc]);
        pc += toks[pos+1][1]*restype;
        pos += 3;
      elif (toks[pos][1] == "extern"):
        if (toks[pos+1][0] != T_STR):
          print(f"\033[31mError\033[0m: expected filename after extern.");
          print(f"\033[96mHint\033[0m: syntax for `extern` is: extern \"filename\"");
          exit(1);
        with open(toks[pos+1][1], "rb") as extern_file:
          extern_source = extern_file.read()
        ast.append([ASTRES, "__B_extern", extern_source, pc]);
        pc += len(extern_source);
        pos += 2;
    elif (toks[pos][0] == T_EOL):
      pos += 1;
    else:
      print("kasm: unknown token: %s %s" % (HUMAN_TOKS[toks[pos][0]], toks[pos][1]));
      exit(1);
  ast.append([ASTEOF, 0, 0, pc]);
  if (expm):
    print(f"\033[92m{filename}: exported {len(labels)} symbols\033[0m");
  else:
    print(f"{filename}: compiled {pc} bytes");
  return ast, labels;

# Little endian
AsWord = lambda a: ((a & 0xFF), (a >> 8));
As24   = lambda a: ((a & 0xFF), ((a >> 8) & 0xFF), (a >> 16));
As32   = lambda a: ((a & 0xFF), ((a >> 8) & 0xFF), ((a >> 16) & 0xFF), (a >> 24));

CompileInst = lambda prog, b, labels, pos: \
  (((0xC0+b[2][0], *As32(b[2][1])), pos+1)         if (b[1] == "MOVri") else
   ((0xC0+b[2][0], *As32(labels[b[2][1]])), pos+1) if (b[1] == "MOVrl") else
   ((0xD0+b[2][0], *As32(b[2][1])), pos+1)         if (b[1] == "MOVrb") else
   ((0xD8+b[2][0], *As32(b[2][1])), pos+1)         if (b[1] == "MOVrw") else
   ((0xE0+b[2][1], *As32(b[2][0])), pos+1)         if (b[1] == "MOVbr") else
   ((0xE8+b[2][1], *As32(b[2][0])), pos+1)         if (b[1] == "MOVwr") else
   ((0xCF, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "MOVrc") else
   ((0xC0+b[2][0], *As32(labels[b[2][1]])), pos+1) if (b[1] == "MOVra") else
   ((0x41, b[2]), pos+1)                           if (b[1] == "INT8") else
   ((0xB6, b[2]), pos+1)                           if (b[1] == "POPr") else
   ((0x00,), pos+1)                                if (b[1] == "HLT") else
   ((0x05,), pos+1)                                if (b[1] == "NOP") else
   ((0x48+b[2][0], *As32(b[2][1])), pos+1)         if (b[1] == "ADDri") else
   ((0x47, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "ADDrc") else
   ((0x38, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "ANDrc") else
   ((0x39, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "ORArc") else
   ((0x3A, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "XORrc") else
   ((0x50+b[2][0], *As32(b[2][1])), pos+1)         if (b[1] == "ADDrb") else
   ((0x58+b[2][0], *As32(b[2][1])), pos+1)         if (b[1] == "ADDrw") else
   ((0x60+b[2][1], *As32(b[2][0])), pos+1)         if (b[1] == "ADDbr") else
   ((0x68+b[2][1], *As32(b[2][0])), pos+1)         if (b[1] == "ADDwr") else
   ((0x86, *As32(labels[b[2]])), pos+1)            if (b[1] == "JMPa") else
   ((0x86, *As32(b[2])), pos+1)                    if (b[1] == "JMP2") else
   ((0xA0, *As32(labels[b[2]])), pos+1)            if (b[1] == "JEa") else
   ((0xA1, *As32(labels[b[2]])), pos+1)            if (b[1] == "JNEa") else
   ((0xA2, *As32(labels[b[2]])), pos+1)            if (b[1] == "JCa") else
   ((0xA3, *As32(labels[b[2]])), pos+1)            if (b[1] == "JNCa") else
   ((0xA4, *As32(labels[b[2]])), pos+1)            if (b[1] == "JSa") else
   ((0xA5, *As32(labels[b[2]])), pos+1)            if (b[1] == "JNa") else
   ((0xA6, *As32(labels[b[2]])), pos+1)            if (b[1] == "JIa") else
   ((0xA7, *As32(labels[b[2]])), pos+1)            if (b[1] == "JNIa") else
   ((0xB8, *As32(labels[b[2]])), pos+1)            if (b[1] == "LOOPa") else
   ((0x10+b[2][0], *As32(b[2][1])), pos+1)         if (b[1] == "SUBri") else
   ((0xC8, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "SUBrc") else
   ((0x08+b[2][0], *As32(b[2][1])), pos+1)         if (b[1] == "MULri") else
   ((0xC9, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "MULrc") else
   ((0x80+b[2][0], *As32(b[2][1])), pos+1)         if (b[1] == "DIVri") else
   ((0xCA, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "DIVrc") else
   ((0x20+b[2],), pos+1)                           if (b[1] == "INXr") else
   ((0x28+b[2],), pos+1)                           if (b[1] == "DEXr") else
   ((0x30, *As32(b[2])), pos+1)                    if (b[1] == "INXb") else
   ((0x40, *As32(b[2])), pos+1)                    if (b[1] == "INXw") else
   ((0x32, *As32(b[2])), pos+1)                    if (b[1] == "DEXb") else
   ((0x42, *As32(b[2])), pos+1)                    if (b[1] == "DEXw") else
   ((0x70+b[2][0], *As32(b[2][1])), pos+1)         if (b[1] == "CMPri") else
   ((0x37, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "CMPrc") else
   ((0x7F, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "LODBc") else
   ((0x8F, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "LODWc") else
   ((0x9F, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "LODHc") else
   ((0x7E, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "STOBc") else
   ((0x8E, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "STOWc") else
   ((0x9E, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "STOHc") else
   ((0x01,), pos+1)                                if (b[1] == "TRAP") else
   ((0x79,), pos+1)                                if (b[1] == "RET") else
   ((0xA8,), pos+1)                                if (b[1] == "RE") else
   ((0xA9,), pos+1)                                if (b[1] == "RNE") else
   ((0xAA,), pos+1)                                if (b[1] == "RC") else
   ((0xAB,), pos+1)                                if (b[1] == "RNC") else
   ((0xAC,), pos+1)                                if (b[1] == "RS") else
   ((0xAD,), pos+1)                                if (b[1] == "RN") else
   ((0xAE,), pos+1)                                if (b[1] == "RI") else
   ((0xAF,), pos+1)                                if (b[1] == "RNI") else
   ((0xB0, *As32(b[2])), pos+1)                    if (b[1] == "PUSHi") else
   ((0xB0, *As32(labels[b[2]])), pos+1)            if (b[1] == "PUSHl") else
   ((0xB5, b[2]), pos+1)                           if (b[1] == "PUSHr") else
   ((0x78, *As32(labels[b[2]])), pos+1)            if (b[1] == "CALLa") else
   ((0x78, *As32(b[2])), pos+1)                    if (b[1] == "CALL2") else
   ((0xB9,), pos+1)                                if (b[1] == "LDDS") else
   ((0xBA,), pos+1)                                if (b[1] == "LDDG") else
   ((0xBB,), pos+1)                                if (b[1] == "STDS") else
   ((0xBC,), pos+1)                                if (b[1] == "STDG") else
   ((0x03, b[2]), pos+1)                           if (b[1] == "STI8") else
   ((0x04,), pos+1)                                if (b[1] == "IRET") else
   ((0x40, *As32(labels[b[2]])), pos+1)            if (b[1] == "INXwl") else
   ((0x42, *As32(labels[b[2]])), pos+1)            if (b[1] == "DEXwl") else
   ((0x30, *As32(labels[b[2]])), pos+1)            if (b[1] == "INXbl") else
   ((0x32, *As32(labels[b[2]])), pos+1)            if (b[1] == "DEXbl") else
   ((0xBF, (b[2][0]<<4)+b[2][1]), pos+1)           if (b[1] == "POWrc") else
   ((0x7A, (b[2][0]<<5)+(b[2][1])), pos+1)         if (b[1] == "SALrg") else
   ((0x7B, (b[2][0]<<5)+(b[2][1])), pos+1)         if (b[1] == "SARrg") else
   [print("kasm: unknown compilation node %s" % b[1]), (tuple(), 0x1_00_0000)][1]
  );

# Compiler:
def CompileGC32(prog: list, labs: dict):
  code = bytearray();
  pos = 0;
  while (prog[pos][0] != ASTEOF):
    if (prog[pos][0] == ASTINS):
      compbytes, pos = CompileInst(prog, prog[pos], labs, pos);
      if (pos == 0x1_00_0000): exit(1);
      code.extend(compbytes);
    elif (prog[pos][0] == ASTBYTES):
      code.extend(prog[pos][2]);
      pos += 1;
    elif (prog[pos][0] == ASTRES):
      code.extend(bytes(prog[pos][2]));
      pos += 1;
    else:
      print("kasm: unknown ast node: %s" % HUMAN_AST[prog[pos][0]]);
      exit(1);
  return code, 0;

def IKasm() -> int:
  print("interactive kasm");
  while (1):
    cd = input(">>> \033[32m");
    if (not cd):
      print(end="\033[0m");
      continue;
    if (cd == "exit"): exit(0);
    print(end="\033[97m");
    tokens, exitcode = Lex(cd, "input");
    ast, labs = Parse(tokens, "input", False);
    labs = OffsetLabs(labs, 0x030000);
    c, exitcode = CompileGC32(ast, labs);
    print(end="\033[96m");
    for i in c:
      print(end="%02X " % i);
    print("\b\033[0m");
  exit(0);

def main(argc: int, argv: list) -> int:
  diskmode = False;
  exportmode = False;
  if (argc == 1):
    print("No arguments given");
    usage();
    return 1;
  # elif (argc == 2):
  #   print("No binary filename given");
  #   return 1;
  argp: int = 1;
  imp_files = [];
  offset = 0x030000;
  while (argp < argc):
    match (argv[argp]):
      case "-e":
        exportmode = 1;
        argp += 1;
      case "-i":
        imp_files.append(argv[argp+1]);
        argp += 2;
      case "-o":
        offset = int(argv[argp+1], base=16);
        argp += 2;
      case "-d":
        diskmode = True;
        argp += 1;
      case "-I":
        IKasm();
        argp += 1;
        break;
      case "-h":
        usage();
        return 0;
      case _:
        progname = argv[argp];
        outname = argv[argp+1];
        break;

  if (argc == 3):
    progname = argv[1];
    outname = argv[2];

  with open(progname, "r") as fl:
    src = fl.read();
  src = RemEmpty(src)+"\0";
  tokens, exitcode = Lex(src, progname);
  if (type(tokens[1]) is int):
    print("Fatal error. Can't compile");
    exit(tokens);
  ast, labs = Parse(tokens, progname, exportmode);
  labs = OffsetLabs(labs, offset);
  if (exportmode):
    ExportLabs(progname, labs, outname);
    exit(1);
  for imp_file in imp_files:
    labs = ImportLabs(progname, labs, imp_file);
  c, exitcode = CompileGC32(ast, labs);
  with open(outname, "wb") as fl:
    fl.write(c);

  return 0;

sys.exit(main(len(sys.argv), sys.argv));
